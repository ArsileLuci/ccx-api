#[cfg(feature = "db")]
use diesel_derives::AsExpression;
#[cfg(feature = "db")]
use diesel_derives::FromSqlRow;
use rust_decimal::Decimal;
use serde::Deserialize;
use serde::Serialize;
use uuid::Uuid;

use crate::api::Api;
use crate::error::LibResult;
use crate::types::enums::TransferStatus;
use crate::types::enums::TransferType;
use crate::types::time::Time;
use crate::uuid_simple;
use crate::BinancePayResponse;

pub const BINANCEPAY_OPENAPI_TRANSFER_FUND: &str = "/binancepay/openapi/wallet/transfer";

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct V2TransferFundRequest {
    #[serde(rename = "requestId", with = "uuid_simple")]
    pub request_id: Uuid, //string	Y	maximum length 32	Represents the unique ID of each transfer request.Generated by the merchant
    pub currency: String, //string	Y	Not limited, as long as it is within the range.	transfer currency, e.g. "BUSD"
    pub amount: Decimal,  //  string	Y	Greater than 0	the transfer amount
    #[serde(rename = "transferType")]
    pub transfer_type: TransferType, //    string  Y   Only "TO_MAIN" OR "TO_PAY"	The transfer direction specified by the merchant
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct V2TransferResult {
    #[serde(rename = "tranId")]
    pub transfer_id: String, //	string	Y	-	Used to query the transfer status, query the necessary fields for the transfer status
    pub status: TransferStatus, //	string	Y	SUCCESS OR FAILURE OR PROCESS	SUCCESS (indicating that the transfer is completely successful), FAILURE (indicating that the transfer has failed, it may be that the transferor has a problem with the transferee), PROCESS (the transfer is in progress)
    pub currency: String, //	string	Y	Not limited, as long as it is within the range.	transfer currency, e.g. "BUSD"
    pub amount: Decimal,  //	string	Y	-	the transfer amount
    #[serde(rename = "transferType")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transfer_type: Option<TransferType>,
}

impl<S: crate::client::BinancePaySigner> Api<S> {
    pub async fn v2_transfer_fund(
        &self,
        request: V2TransferFundRequest,
        time_window: impl Into<Time>,
    ) -> LibResult<BinancePayResponse<V2TransferResult>> {
        self.client
            .post_json(BINANCEPAY_OPENAPI_TRANSFER_FUND, request)?
            .signed(time_window)?
            .random_nonce()?
            .send()
            .await
    }
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn v2_test_serde_transfer_request() {
        let json = r#"
        {
            "requestId": "9a1c04a06dbc432e94fa4e2bd693c663",
            "currency": "BNB",
            "amount": "0.01",
            "transferType": "TO_MAIN"
        }
        "#;
        let request: V2TransferFundRequest = serde_json::from_str(json).expect("Failed from_str");
        println!("test_serde_transfer_request :: {:#?}", request);
    }

    #[test]
    fn v2_test_serde_transfer_response_1() {
        let example = r#"
        {
            "status": "SUCCESS",
            "code": "000000",
            "data": {
              "tranId": "100002021071407140001",
              "status": "SUCCESS",
              "currency": "BNB",
              "amount": "0.01",
              "transferType": "TO_MAIN"
            },
            "errorMessage": ""
        }
        "#;
        let response: BinancePayResponse<V2TransferResult> =
            serde_json::from_str(example).expect("Failed from_str");
        println!("test_serde_transfer_response_1 response :: {:#?}", response);
    }

    #[test]
    #[should_panic]
    fn v2_test_serde_transfer_response_2() {
        let example = r#"
        {
            "status": "REPEAT_REQ_SUCCESS",
            "code": "000001", 
            "data": {
              "tranId": "100002021071407140001",
              "status": "SUCCESS",
              "currency": "BNB",
              "amount": "0.01",
              "transferType": "TO_MAIN"
            },
            "errorMessage": ""
        }
        "#;
        let response: BinancePayResponse<V2TransferResult> =
            serde_json::from_str(example).expect("Failed from_str");
        println!("test_serde_transfer_response_2 response :: {:#?}", response);
    }
}
